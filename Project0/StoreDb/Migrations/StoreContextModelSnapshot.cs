// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StoreDb;

namespace StoreDb.Migrations
{
    [DbContext(typeof(StoreContext))]
    partial class StoreContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3");

            modelBuilder.Entity("StoreDb.Customer", b =>
                {
                    b.Property<Guid>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("DefaultLocationLocationId")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.HasKey("CustomerId");

                    b.HasIndex("DefaultLocationLocationId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("StoreDb.Location", b =>
                {
                    b.Property<Guid>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("LocationId");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("StoreDb.LocationInventory", b =>
                {
                    b.Property<Guid>("LocationInventoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("LocationId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ProductComponentId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.HasKey("LocationInventoryId");

                    b.HasIndex("LocationId");

                    b.HasIndex("ProductComponentId");

                    b.ToTable("LocationInventories");
                });

            modelBuilder.Entity("StoreDb.Order", b =>
                {
                    b.Property<Guid>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<double>("AmountPaid")
                        .HasColumnType("REAL");

                    b.Property<Guid?>("CustomerId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("LocationId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("TimeCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("TimeFulfilled")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("TimeSubmitted")
                        .HasColumnType("TEXT");

                    b.HasKey("OrderId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("LocationId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("StoreDb.OrderDetail", b =>
                {
                    b.Property<Guid>("OrderDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<double>("AmountCharged")
                        .HasColumnType("REAL");

                    b.Property<Guid?>("OrderId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.HasKey("OrderDetailId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("StoreDb.Product", b =>
                {
                    b.Property<Guid>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<double>("Price")
                        .HasColumnType("REAL");

                    b.HasKey("ProductId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("StoreDb.ProductComponent", b =>
                {
                    b.Property<Guid>("ProductComponentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("TEXT");

                    b.HasKey("ProductComponentId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductComponents");
                });

            modelBuilder.Entity("StoreDb.Promotion", b =>
                {
                    b.Property<Guid>("PromotionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<double>("Amount")
                        .HasColumnType("REAL");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("LocationId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("PromotionTypeId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("TEXT");

                    b.HasKey("PromotionId");

                    b.HasIndex("LocationId");

                    b.HasIndex("ProductId");

                    b.HasIndex("PromotionTypeId");

                    b.ToTable("Promotions");
                });

            modelBuilder.Entity("StoreDb.PromotionType", b =>
                {
                    b.Property<Guid>("PromotionTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("PromotionTypeDetail")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("PromotionTypeId");

                    b.ToTable("PromotionType");
                });

            modelBuilder.Entity("StoreDb.Customer", b =>
                {
                    b.HasOne("StoreDb.Location", "DefaultLocation")
                        .WithMany()
                        .HasForeignKey("DefaultLocationLocationId");
                });

            modelBuilder.Entity("StoreDb.LocationInventory", b =>
                {
                    b.HasOne("StoreDb.Location", "Location")
                        .WithMany("Inventory")
                        .HasForeignKey("LocationId");

                    b.HasOne("StoreDb.ProductComponent", "ProductComponent")
                        .WithMany()
                        .HasForeignKey("ProductComponentId");
                });

            modelBuilder.Entity("StoreDb.Order", b =>
                {
                    b.HasOne("StoreDb.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId");

                    b.HasOne("StoreDb.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId");
                });

            modelBuilder.Entity("StoreDb.OrderDetail", b =>
                {
                    b.HasOne("StoreDb.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId");

                    b.HasOne("StoreDb.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");
                });

            modelBuilder.Entity("StoreDb.ProductComponent", b =>
                {
                    b.HasOne("StoreDb.Product", null)
                        .WithMany("ProductComponents")
                        .HasForeignKey("ProductId");
                });

            modelBuilder.Entity("StoreDb.Promotion", b =>
                {
                    b.HasOne("StoreDb.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId");

                    b.HasOne("StoreDb.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.HasOne("StoreDb.PromotionType", "PromotionType")
                        .WithMany()
                        .HasForeignKey("PromotionTypeId");
                });
#pragma warning restore 612, 618
        }
    }
}
